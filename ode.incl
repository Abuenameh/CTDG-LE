double ode1r(int i, int np, vector<double>& fin, vector<double>& J, double U0, vector<double>& dU, double mu)
{
double Edfc = 0;
int k1 = mod(i-2);
int j1 = mod(i-1);
int j2 = mod(i+1);
int k2 = mod(i+2);
for( int n = 0; n < 1 + nmax; n++)
{
if( n + -1 * np == 0)
{
Edfc += -0.5 * n * U0 * fin[1 + 2*(8*i + n)];
Edfc += 0.5 * (n * n) * U0 * fin[1 + 2*(8*i + n)];
Edfc += -1 * mu * n * fin[1 + 2*(8*i + n)];
Edfc += -0.5 * n * dU[i] * fin[1 + 2*(8*i + n)];
Edfc += 0.5 * (n * n) * dU[i] * fin[1 + 2*(8*i + n)];
}
}
return Edfc;
}

double ode1i(int i, int np, vector<double>& fin, vector<double>& J, double U0, vector<double>& dU, double mu)
{
double Edfc = 0;
int k1 = mod(i-2);
int j1 = mod(i-1);
int j2 = mod(i+1);
int k2 = mod(i+2);
for( int n = 0; n < 1 + nmax; n++)
{
if( n + -1 * np == 0)
{
Edfc += 0.5 * n * U0 * fin[2*(8*i + n)];
Edfc += -0.5 * (n * n) * U0 * fin[2*(8*i + n)];
Edfc += mu * n * fin[2*(8*i + n)];
Edfc += 0.5 * n * dU[i] * fin[2*(8*i + n)];
Edfc += -0.5 * (n * n) * dU[i] * fin[2*(8*i + n)];
}
}
return Edfc;
}

double ode1(int in, vector<double>& fin, vector<double>& J, double U0, vector<double>& dU, double mu)
{
int i = in / (2*dim);
int n = (in % (2*dim)) / 2;
if( in % 2 == 0)
{
return ode1r(i, n, fin, J, U0, dU, mu);
}
else
{
return ode1i(i, n, fin, J, U0, dU, mu);
}
}

double ode2r(int i, int np, vector<double>& fin, vector<double>& J, double U0, vector<double>& dU, double mu)
{
double Edfc = 0;
int k1 = mod(i-2);
int j1 = mod(i-1);
int j2 = mod(i+1);
int k2 = mod(i+2);
for( int n = 0; n < nmax; n++)
{
if( n + -1 * np == 0)
{
Edfc += -1 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + n)] * gd(n, 1 + n) * J[j1];
Edfc += -1 * fin[2*(1 + 8*i + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * gd(n, 1 + n) * J[j1];
Edfc += fin[2*(1 + 8*i + n)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * gd(n, 1 + n) * J[j1];
Edfc += -1 * fin[1 + 2*(1 + 8*i + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * gd(n, 1 + n) * J[j1];
Edfc += -1 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + n)] * gd(n, 1 + n) * J[i];
Edfc += -1 * fin[2*(1 + 8*i + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * gd(n, 1 + n) * J[i];
Edfc += fin[2*(1 + 8*i + n)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * gd(n, 1 + n) * J[i];
Edfc += -1 * fin[1 + 2*(1 + 8*i + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * gd(n, 1 + n) * J[i];
}
if( 1 + n + -1 * np == 0)
{
Edfc += -1 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*i + n)] * gd(n, 1 + n) * J[j1];
Edfc += fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * gd(n, 1 + n) * J[j1];
Edfc += -1 * fin[2*(8*i + n)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * gd(n, 1 + n) * J[j1];
Edfc += -1 * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * gd(n, 1 + n) * J[j1];
Edfc += -1 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*i + n)] * gd(n, 1 + n) * J[i];
Edfc += fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * gd(n, 1 + n) * J[i];
Edfc += -1 * fin[2*(8*i + n)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * gd(n, 1 + n) * J[i];
Edfc += -1 * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * gd(n, 1 + n) * J[i];
}
}
return Edfc;
}

double ode2i(int i, int np, vector<double>& fin, vector<double>& J, double U0, vector<double>& dU, double mu)
{
double Edfc = 0;
int k1 = mod(i-2);
int j1 = mod(i-1);
int j2 = mod(i+1);
int k2 = mod(i+2);
for( int n = 0; n < nmax; n++)
{
if( n + -1 * np == 0)
{
Edfc += fin[2*(1 + 8*i + n)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * gd(n, 1 + n) * J[j1];
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + n)] * fin[1 + 2*(8*j1 + n)] * gd(n, 1 + n) * J[j1];
Edfc += fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + n)] * fin[1 + 2*(1 + 8*j1 + n)] * gd(n, 1 + n) * J[j1];
Edfc += fin[2*(1 + 8*i + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * gd(n, 1 + n) * J[j1];
Edfc += fin[2*(1 + 8*i + n)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * gd(n, 1 + n) * J[i];
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + n)] * fin[1 + 2*(8*j2 + n)] * gd(n, 1 + n) * J[i];
Edfc += fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + n)] * fin[1 + 2*(1 + 8*j2 + n)] * gd(n, 1 + n) * J[i];
Edfc += fin[2*(1 + 8*i + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * gd(n, 1 + n) * J[i];
}
if( 1 + n + -1 * np == 0)
{
Edfc += fin[2*(8*i + n)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * gd(n, 1 + n) * J[j1];
Edfc += fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + n)] * gd(n, 1 + n) * J[j1];
Edfc += -1 * fin[2*(8*j1 + n)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + n)] * gd(n, 1 + n) * J[j1];
Edfc += fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * gd(n, 1 + n) * J[j1];
Edfc += fin[2*(8*i + n)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * gd(n, 1 + n) * J[i];
Edfc += fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + n)] * gd(n, 1 + n) * J[i];
Edfc += -1 * fin[2*(8*j2 + n)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + n)] * gd(n, 1 + n) * J[i];
Edfc += fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * gd(n, 1 + n) * J[i];
}
}
return Edfc;
}

double ode2(int in, vector<double>& fin, vector<double>& J, double U0, vector<double>& dU, double mu)
{
int i = in / (2*dim);
int n = (in % (2*dim)) / 2;
if( in % 2 == 0)
{
return ode2r(i, n, fin, J, U0, dU, mu);
}
else
{
return ode2i(i, n, fin, J, U0, dU, mu);
}
}

double ode3r(int i, int np, vector<double>& fin, vector<double>& J, double U0, vector<double>& dU, double mu)
{
double Edfc = 0;
int k1 = mod(i-2);
int j1 = mod(i-1);
int j2 = mod(i+1);
int k2 = mod(i+2);
for( int n = 0; n < nmax; n++)
{
for( int m = 1; m < 1 + nmax; m++)
{
if( n != -1 + m)
{
if( 1 + n + -1 * np == 0)
{
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * gd(n, m) * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * gd(n, m) * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * gd(n, m) * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * gd(n, m) * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * gd(n, m) * J[i] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * gd(n, m) * J[i] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * gd(n, m) * J[i] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * gd(n, m) * J[i] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0)
{
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * gd(n, m) * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * gd(n, m) * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * gd(n, m) * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * gd(n, m) * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * gd(n, m) * J[i] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * gd(n, m) * J[i] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * gd(n, m) * J[i] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * gd(n, m) * J[i] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m)));
}
}
}
}
return Edfc;
}

double ode3i(int i, int np, vector<double>& fin, vector<double>& J, double U0, vector<double>& dU, double mu)
{
double Edfc = 0;
int k1 = mod(i-2);
int j1 = mod(i-1);
int j2 = mod(i+1);
int k2 = mod(i+2);
for( int n = 0; n < nmax; n++)
{
for( int m = 1; m < 1 + nmax; m++)
{
if( n != -1 + m)
{
if( 1 + n + -1 * np == 0)
{
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * gd(n, m) * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * gd(n, m) * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * gd(n, m) * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * gd(n, m) * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * gd(n, m) * J[i] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * gd(n, m) * J[i] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * gd(n, m) * J[i] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * gd(n, m) * J[i] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0)
{
Edfc += fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * gd(n, m) * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * gd(n, m) * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * gd(n, m) * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * gd(n, m) * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * gd(n, m) * J[i] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * gd(n, m) * J[i] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * gd(n, m) * J[i] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * gd(n, m) * J[i] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m)));
}
}
}
}
return Edfc;
}

double ode3(int in, vector<double>& fin, vector<double>& J, double U0, vector<double>& dU, double mu)
{
int i = in / (2*dim);
int n = (in % (2*dim)) / 2;
if( in % 2 == 0)
{
return ode3r(i, n, fin, J, U0, dU, mu);
}
else
{
return ode3i(i, n, fin, J, U0, dU, mu);
}
}

double ode4r(int i, int np, vector<double>& fin, vector<double>& J, double U0, vector<double>& dU, double mu)
{
double Edfc = 0;
int k1 = mod(i-2);
int j1 = mod(i-1);
int j2 = mod(i+1);
int k2 = mod(i+2);
for( int n = 0; n < nmax; n++)
{
for( int m = 1; m < 1 + nmax; m++)
{
if( n != -1 + m)
{
for( int p = 0; p < nmax; p++)
{
if( 1 + n + -1 * np == 0 && m + -1 * p == 0)
{
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0)
{
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( n + -1 * p == 0 && np + -1 * p == 0)
{
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( n + -1 * p == 0 && np + -1 * p == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && 2 + -1 * m + p == 0)
{
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * p == 0 && 1 + -1 * np + p == 0)
{
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * p == 0 && 2 + -1 * m + p == 0 && 1 + -1 * np + p == 0)
{
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && 1 + -1 * m + p == 0)
{
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( m + -1 * p == 0 && 1 + -1 * np + p == 0)
{
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( n + -1 * p == 0 && 1 + -1 * np + p == 0)
{
Edfc += -1 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * p == 0 && 1 + -1 * np + p == 0)
{
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + p == 0 && 1 + -1 * np + p == 0)
{
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( n + -1 * p == 0 && 1 + -1 * m + p == 0 && 1 + -1 * np + p == 0)
{
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 2 + -1 * m + p == 0 && 1 + -1 * np + p == 0)
{
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * p == 0 && 2 + -1 * m + p == 0 && 1 + -1 * np + p == 0)
{
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0)
{
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0)
{
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( n + -1 * p == 0 && np + -1 * p == 0)
{
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( n + -1 * p == 0 && np + -1 * p == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && 2 + -1 * m + p == 0)
{
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * p == 0 && 1 + -1 * np + p == 0)
{
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * p == 0 && 2 + -1 * m + p == 0 && 1 + -1 * np + p == 0)
{
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && 1 + -1 * m + p == 0)
{
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( m + -1 * p == 0 && 1 + -1 * np + p == 0)
{
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( n + -1 * p == 0 && 1 + -1 * np + p == 0)
{
Edfc += -1 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * p == 0 && 1 + -1 * np + p == 0)
{
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + p == 0 && 1 + -1 * np + p == 0)
{
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( n + -1 * p == 0 && 1 + -1 * m + p == 0 && 1 + -1 * np + p == 0)
{
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 2 + -1 * m + p == 0 && 1 + -1 * np + p == 0)
{
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * p == 0 && 2 + -1 * m + p == 0 && 1 + -1 * np + p == 0)
{
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0)
{
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0)
{
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && 1 + n + -1 * p == 0)
{
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && 1 + -1 * m + p == 0)
{
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0)
{
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * p == 0 && np + -1 * p == 0 && 2 + -1 * m + p == 0)
{
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && 1 + -1 * n + p == 0)
{
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + p == 0 && 1 + -1 * np + p == 0)
{
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( n + -1 * p == 0 && 1 + -1 * m + p == 0 && 1 + -1 * np + p == 0)
{
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0)
{
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0)
{
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( n + -1 * p == 0 && np + -1 * p == 0)
{
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * p == 0 && np + -1 * p == 0)
{
Edfc += -1 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( np + -1 * p == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( n + -1 * p == 0 && np + -1 * p == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0)
{
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * p == 0 && np + -1 * p == 0 && 2 + -1 * m + p == 0)
{
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( np + -1 * p == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * p == 0 && np + -1 * p == 0)
{
Edfc += -1 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( np + -1 * p == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( n + -1 * p == 0 && 1 + -1 * np + p == 0)
{
Edfc += -1 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && 1 + n + -1 * p == 0)
{
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && 1 + -1 * n + p == 0)
{
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0)
{
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0)
{
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && 1 + n + -1 * p == 0)
{
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && 1 + -1 * m + p == 0)
{
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0)
{
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * p == 0 && np + -1 * p == 0 && 2 + -1 * m + p == 0)
{
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && 1 + -1 * n + p == 0)
{
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + p == 0 && 1 + -1 * np + p == 0)
{
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( n + -1 * p == 0 && 1 + -1 * m + p == 0 && 1 + -1 * np + p == 0)
{
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0)
{
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0)
{
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( n + -1 * p == 0 && np + -1 * p == 0)
{
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * p == 0 && np + -1 * p == 0)
{
Edfc += -1 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( np + -1 * p == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( n + -1 * p == 0 && np + -1 * p == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0)
{
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * p == 0 && np + -1 * p == 0 && 2 + -1 * m + p == 0)
{
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( np + -1 * p == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * p == 0 && np + -1 * p == 0)
{
Edfc += -1 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( np + -1 * p == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( n + -1 * p == 0 && 1 + -1 * np + p == 0)
{
Edfc += -1 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && 1 + n + -1 * p == 0)
{
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && 1 + -1 * n + p == 0)
{
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( np + -1 * p == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( m + -1 * p == 0 && 1 + -1 * np + p == 0)
{
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 2 + -1 * m + p == 0 && 1 + -1 * np + p == 0)
{
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0)
{
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0)
{
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && 2 + -1 * m + p == 0)
{
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( np + -1 * p == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( m + -1 * p == 0 && 1 + -1 * np + p == 0)
{
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 2 + -1 * m + p == 0 && 1 + -1 * np + p == 0)
{
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0)
{
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0)
{
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && 2 + -1 * m + p == 0)
{
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
}
}
}
}
return Edfc;
}

double ode4i(int i, int np, vector<double>& fin, vector<double>& J, double U0, vector<double>& dU, double mu)
{
double Edfc = 0;
int k1 = mod(i-2);
int j1 = mod(i-1);
int j2 = mod(i+1);
int k2 = mod(i+2);
for( int n = 0; n < nmax; n++)
{
for( int m = 1; m < 1 + nmax; m++)
{
if( n != -1 + m)
{
for( int p = 0; p < nmax; p++)
{
if( 1 + n + -1 * np == 0 && m + -1 * p == 0)
{
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0)
{
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( n + -1 * p == 0 && np + -1 * p == 0)
{
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( n + -1 * p == 0 && np + -1 * p == 0 && 1 + -1 * m + p == 0)
{
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && 2 + -1 * m + p == 0)
{
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * p == 0 && 1 + -1 * np + p == 0)
{
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * p == 0 && 2 + -1 * m + p == 0 && 1 + -1 * np + p == 0)
{
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( m + -1 * p == 0 && 1 + -1 * np + p == 0)
{
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( n + -1 * p == 0 && 1 + -1 * np + p == 0)
{
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * p == 0 && 1 + -1 * np + p == 0)
{
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + p == 0 && 1 + -1 * np + p == 0)
{
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( n + -1 * p == 0 && 1 + -1 * m + p == 0 && 1 + -1 * np + p == 0)
{
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 2 + -1 * m + p == 0 && 1 + -1 * np + p == 0)
{
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * p == 0 && 2 + -1 * m + p == 0 && 1 + -1 * np + p == 0)
{
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0)
{
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0)
{
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( n + -1 * p == 0 && np + -1 * p == 0)
{
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( n + -1 * p == 0 && np + -1 * p == 0 && 1 + -1 * m + p == 0)
{
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && 2 + -1 * m + p == 0)
{
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * p == 0 && 1 + -1 * np + p == 0)
{
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * p == 0 && 2 + -1 * m + p == 0 && 1 + -1 * np + p == 0)
{
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( m + -1 * p == 0 && 1 + -1 * np + p == 0)
{
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( n + -1 * p == 0 && 1 + -1 * np + p == 0)
{
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * p == 0 && 1 + -1 * np + p == 0)
{
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + p == 0 && 1 + -1 * np + p == 0)
{
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( n + -1 * p == 0 && 1 + -1 * m + p == 0 && 1 + -1 * np + p == 0)
{
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 2 + -1 * m + p == 0 && 1 + -1 * np + p == 0)
{
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * p == 0 && 2 + -1 * m + p == 0 && 1 + -1 * np + p == 0)
{
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0)
{
Edfc += fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0)
{
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && 1 + n + -1 * p == 0)
{
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0)
{
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * p == 0 && np + -1 * p == 0 && 2 + -1 * m + p == 0)
{
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + p == 0 && 1 + -1 * np + p == 0)
{
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( n + -1 * p == 0 && 1 + -1 * m + p == 0 && 1 + -1 * np + p == 0)
{
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0)
{
Edfc += fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0)
{
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( n + -1 * p == 0 && np + -1 * p == 0)
{
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * p == 0 && np + -1 * p == 0)
{
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( np + -1 * p == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( n + -1 * p == 0 && np + -1 * p == 0 && 1 + -1 * m + p == 0)
{
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0)
{
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * p == 0 && np + -1 * p == 0 && 2 + -1 * m + p == 0)
{
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( np + -1 * p == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * p == 0 && np + -1 * p == 0)
{
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( np + -1 * p == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( n + -1 * p == 0 && 1 + -1 * np + p == 0)
{
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && 1 + n + -1 * p == 0)
{
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0)
{
Edfc += fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0)
{
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && 1 + n + -1 * p == 0)
{
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0)
{
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * p == 0 && np + -1 * p == 0 && 2 + -1 * m + p == 0)
{
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + p == 0 && 1 + -1 * np + p == 0)
{
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( n + -1 * p == 0 && 1 + -1 * m + p == 0 && 1 + -1 * np + p == 0)
{
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0)
{
Edfc += fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0)
{
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( n + -1 * p == 0 && np + -1 * p == 0)
{
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * p == 0 && np + -1 * p == 0)
{
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( np + -1 * p == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( n + -1 * p == 0 && np + -1 * p == 0 && 1 + -1 * m + p == 0)
{
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0)
{
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * p == 0 && np + -1 * p == 0 && 2 + -1 * m + p == 0)
{
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( np + -1 * p == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * p == 0 && np + -1 * p == 0)
{
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( np + -1 * p == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( n + -1 * p == 0 && 1 + -1 * np + p == 0)
{
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && 1 + n + -1 * p == 0)
{
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && 1 + -1 * n + p == 0)
{
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( np + -1 * p == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( m + -1 * p == 0 && 1 + -1 * np + p == 0)
{
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 2 + -1 * m + p == 0 && 1 + -1 * np + p == 0)
{
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0)
{
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0)
{
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && 2 + -1 * m + p == 0)
{
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * gd(n, m) * gd(p, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( np + -1 * p == 0 && 1 + -1 * m + p == 0)
{
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( m + -1 * p == 0 && 1 + -1 * np + p == 0)
{
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 2 + -1 * m + p == 0 && 1 + -1 * np + p == 0)
{
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*i + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*i + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0)
{
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0)
{
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && 2 + -1 * m + p == 0)
{
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
Edfc += -1 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * gd(n, m) * gd(p, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, p, 1 + p) * (1 / (epsd(U0, n, m) * epsd(U0, n, m)));
}
}
}
}
}
return Edfc;
}

double ode4(int in, vector<double>& fin, vector<double>& J, double U0, vector<double>& dU, double mu)
{
int i = in / (2*dim);
int n = (in % (2*dim)) / 2;
if( in % 2 == 0)
{
return ode4r(i, n, fin, J, U0, dU, mu);
}
else
{
return ode4i(i, n, fin, J, U0, dU, mu);
}
}

double ode5r(int i, int np, vector<double>& fin, vector<double>& J, double U0, vector<double>& dU, double mu)
{
double Edfc = 0;
int k1 = mod(i-2);
int j1 = mod(i-1);
int j2 = mod(i+1);
int k2 = mod(i+2);
for( int n = 0; n < nmax; n++)
{
for( int m = 1; m < 1 + nmax; m++)
{
if( n != -1 + m)
{
for( int p = 0; p < nmax; p++)
{
for( int q = 1; q < 1 + nmax; q++)
{
if( p != -1 + q)
{
if( 1 + -1 * m + np == 0 && m + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( m + -1 * p == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 2 + -1 * m + p == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( m + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && m + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 2 + n + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 2 + -1 * m + p == 0 && 2 + n + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && m + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( m + -1 * p == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 2 + -1 * m + p == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( m + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && m + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 2 + n + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 2 + -1 * m + p == 0 && 2 + n + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0)
{
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0)
{
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * p == 0)
{
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + n + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0 && 2 + n + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * q == 0)
{
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && 2 + n + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0)
{
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0)
{
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * p == 0)
{
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + n + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0 && 2 + n + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * q == 0)
{
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && 2 + n + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && 2 + -1 * m + p == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && 2 + -1 * m + p == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
}
}
}
}
}
}
return Edfc;
}

double ode5i(int i, int np, vector<double>& fin, vector<double>& J, double U0, vector<double>& dU, double mu)
{
double Edfc = 0;
int k1 = mod(i-2);
int j1 = mod(i-1);
int j2 = mod(i+1);
int k2 = mod(i+2);
for( int n = 0; n < nmax; n++)
{
for( int m = 1; m < 1 + nmax; m++)
{
if( n != -1 + m)
{
for( int p = 0; p < nmax; p++)
{
for( int q = 1; q < 1 + nmax; q++)
{
if( p != -1 + q)
{
if( 1 + -1 * m + np == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( m + -1 * p == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 2 + -1 * m + p == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( m + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && m + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 2 + n + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 2 + -1 * m + p == 0 && 2 + n + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( m + -1 * p == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 2 + -1 * m + p == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( m + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && m + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 2 + n + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 2 + -1 * m + p == 0 && 2 + n + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0)
{
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * p == 0)
{
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + n + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0 && 2 + n + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && 2 + n + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0)
{
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * p == 0)
{
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + n + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0 && 2 + n + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && 2 + n + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && 2 + -1 * m + p == 0)
{
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && 2 + -1 * m + p == 0)
{
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, -1 + q, 1 + p)));
}
}
}
}
}
}
}
return Edfc;
}

double ode5(int in, vector<double>& fin, vector<double>& J, double U0, vector<double>& dU, double mu)
{
int i = in / (2*dim);
int n = (in % (2*dim)) / 2;
if( in % 2 == 0)
{
return ode5r(i, n, fin, J, U0, dU, mu);
}
else
{
return ode5i(i, n, fin, J, U0, dU, mu);
}
}

double ode6r(int i, int np, vector<double>& fin, vector<double>& J, double U0, vector<double>& dU, double mu)
{
double Edfc = 0;
int k1 = mod(i-2);
int j1 = mod(i-1);
int j2 = mod(i+1);
int k2 = mod(i+2);
for( int n = 0; n < nmax; n++)
{
for( int m = 1; m < 1 + nmax; m++)
{
if( n != -1 + m)
{
for( int p = 0; p < nmax; p++)
{
for( int q = 1; q < 1 + nmax; q++)
{
if( p != -1 + q)
{
if( -1 * m + n == p + -1 * q)
{
if( 1 + n + -1 * np == 0 && m + -1 * p == 0)
{
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0)
{
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0)
{
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0)
{
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
}
if( n + -1 * p == 0 && np + -1 * p == 0)
{
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && 2 + -1 * m + p == 0)
{
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0)
{
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && m + -1 * q == 0)
{
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += -0.5 * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
}
if( np + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
}
if( n + -1 * p == 0 && np + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && n + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += -0.5 * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
}
if( np + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && 2 + n + -1 * q == 0)
{
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
}
if( np + -1 * p == 0 && 2 + n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0 && 2 + n + -1 * q == 0)
{
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
}
if( m + -1 * p == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
}
if( n + -1 * p == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
}
if( 2 + -1 * m + p == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
}
if( m + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
}
if( n + -1 * p == 0 && m + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
}
if( 2 + n + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
}
if( 2 + -1 * m + p == 0 && 2 + n + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
}
}
}
}
}
}
}
}
return Edfc;
}

double ode6i(int i, int np, vector<double>& fin, vector<double>& J, double U0, vector<double>& dU, double mu)
{
double Edfc = 0;
int k1 = mod(i-2);
int j1 = mod(i-1);
int j2 = mod(i+1);
int k2 = mod(i+2);
for( int n = 0; n < nmax; n++)
{
for( int m = 1; m < 1 + nmax; m++)
{
if( n != -1 + m)
{
for( int p = 0; p < nmax; p++)
{
for( int q = 1; q < 1 + nmax; q++)
{
if( p != -1 + q)
{
if( -1 * m + n == p + -1 * q)
{
if( 1 + n + -1 * np == 0 && m + -1 * p == 0)
{
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0)
{
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0)
{
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0)
{
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
}
if( n + -1 * p == 0 && np + -1 * p == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && 2 + -1 * m + p == 0)
{
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0)
{
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && m + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && m + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
}
if( np + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
}
if( n + -1 * p == 0 && np + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && n + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && n + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
}
if( np + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
}
if( 1 + -1 * m + np == 0 && 2 + n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
}
if( np + -1 * p == 0 && 2 + n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0 && 2 + n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
}
if( m + -1 * p == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
}
if( n + -1 * p == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
}
if( 2 + -1 * m + p == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * (1 / (epsd(U0, n, m)));
}
if( m + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
}
if( n + -1 * p == 0 && m + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
}
if( 2 + n + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * (1 / (epsd(U0, n, m)));
}
if( 2 + -1 * m + p == 0 && 2 + n + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * (1 / (epsd(U0, n, m)));
}
}
}
}
}
}
}
}
return Edfc;
}

double ode6(int in, vector<double>& fin, vector<double>& J, double U0, vector<double>& dU, double mu)
{
int i = in / (2*dim);
int n = (in % (2*dim)) / 2;
if( in % 2 == 0)
{
return ode6r(i, n, fin, J, U0, dU, mu);
}
else
{
return ode6i(i, n, fin, J, U0, dU, mu);
}
}

double ode7r(int i, int np, vector<double>& fin, vector<double>& J, double U0, vector<double>& dU, double mu)
{
double Edfc = 0;
int k1 = mod(i-2);
int j1 = mod(i-1);
int j2 = mod(i+1);
int k2 = mod(i+2);
for( int n = 0; n < nmax; n++)
{
for( int m = 1; m < 1 + nmax; m++)
{
if( n != -1 + m)
{
for( int p = 0; p < nmax; p++)
{
for( int q = 1; q < 1 + nmax; q++)
{
if( p != -1 + q)
{
if( -1 * m + n != p + -1 * q)
{
if( 1 + n + -1 * np == 0 && m + -1 * p == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0)
{
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * p == 0)
{
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && 2 + -1 * m + p == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 2 + n + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 2 + -1 * m + p == 0 && 2 + n + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && m + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( m + -1 * p == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 2 + -1 * m + p == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( m + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && m + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 2 + n + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 2 + -1 * m + p == 0 && 2 + n + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0)
{
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * p == 0)
{
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && 2 + -1 * m + p == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 2 + n + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 2 + -1 * m + p == 0 && 2 + n + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && m + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( m + -1 * p == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 2 + -1 * m + p == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( m + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && m + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 2 + n + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 2 + -1 * m + p == 0 && 2 + n + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0)
{
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && m + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * q == 0)
{
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && 2 + n + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0 && 2 + n + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( m + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && m + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0)
{
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0)
{
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * p == 0)
{
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + n + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0 && 2 + n + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + n + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * q == 0)
{
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && 2 + n + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0)
{
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && m + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * q == 0)
{
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && 2 + n + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0 && 2 + n + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( m + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && m + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0)
{
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0)
{
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * p == 0)
{
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + n + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0 && 2 + n + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + n + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * q == 0)
{
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && 2 + n + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( m + -1 * p == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 2 + -1 * m + p == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && 2 + -1 * m + p == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( m + -1 * p == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 2 + -1 * m + p == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0)
{
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && 2 + -1 * m + p == 0)
{
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
}
}
}
}
}
}
}
return Edfc;
}

double ode7i(int i, int np, vector<double>& fin, vector<double>& J, double U0, vector<double>& dU, double mu)
{
double Edfc = 0;
int k1 = mod(i-2);
int j1 = mod(i-1);
int j2 = mod(i+1);
int k2 = mod(i+2);
for( int n = 0; n < nmax; n++)
{
for( int m = 1; m < 1 + nmax; m++)
{
if( n != -1 + m)
{
for( int p = 0; p < nmax; p++)
{
for( int q = 1; q < 1 + nmax; q++)
{
if( p != -1 + q)
{
if( -1 * m + n != p + -1 * q)
{
if( 1 + n + -1 * np == 0 && m + -1 * p == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * p == 0)
{
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && 2 + -1 * m + p == 0)
{
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 2 + n + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 2 + -1 * m + p == 0 && 2 + n + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( m + -1 * p == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 2 + -1 * m + p == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( m + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && m + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 2 + n + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 2 + -1 * m + p == 0 && 2 + n + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, i, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * p == 0)
{
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && 2 + -1 * m + p == 0)
{
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 2 + n + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 2 + -1 * m + p == 0 && 2 + n + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( m + -1 * p == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 2 + -1 * m + p == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( m + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && m + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 2 + n + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 2 + -1 * m + p == 0 && 2 + n + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, i, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0)
{
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && 2 + n + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0 && 2 + n + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( m + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(1 + 8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && m + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0)
{
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * p == 0)
{
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + n + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0 && 2 + n + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[j1] * J[j1]) * epsd(dU, j1, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + n + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k1 + m)] * fin[1 + 2*(-1 + 8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k1 + m)] * fin[1 + 2*(8*k1 + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && 2 + n + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*k1 + p)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*k1 + p)] * fin[1 + 2*(1 + 8*k1 + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, j1, k1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0)
{
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + q)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(-1 + 8*j1 + q)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && 2 + n + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0 && 2 + n + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( m + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(1 + 8*j1 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && m + -1 * q == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0)
{
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * p == 0)
{
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(8*j2 + q)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(-1 + 8*j2 + q)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j1] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && n + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && m + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + n + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + -1 * m + p == 0 && 2 + n + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * (J[i] * J[i]) * epsd(dU, j2, i, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && 2 + n + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( n + -1 * p == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*k2 + m)] * fin[1 + 2*(-1 + 8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*k2 + m)] * fin[1 + 2*(8*k2 + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && 2 + n + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(1 + 8*k2 + p)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*k2 + p)] * fin[1 + 2*(1 + 8*k2 + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, j2, k2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( m + -1 * p == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 2 + -1 * m + p == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(1 + 8*k1 + n)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*k1 + n)] * fin[1 + 2*(1 + 8*k1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && 2 + -1 * m + p == 0)
{
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(8*k1 + q)] * fin[1 + 2*(-1 + 8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j1 + p)] * fin[1 + 2*(-1 + 8*k1 + q)] * fin[1 + 2*(8*k1 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[j1] * J[k1] * epsd(dU, k1, j1, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( np + -1 * p == 0 && m + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(-1 + 8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*i + p)] * fin[1 + 2*(8*j2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( m + -1 * p == 0 && np + -1 * q == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 2 + -1 * m + p == 0 && np + -1 * q == 0)
{
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(1 + 8*k2 + n)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*k2 + n)] * fin[1 + 2*(1 + 8*k2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*i + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, n, m) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && m + -1 * p == 0)
{
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + -1 * m + np == 0 && n + -1 * p == 0)
{
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*i + m)] * fin[1 + 2*(1 + 8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
if( 1 + n + -1 * np == 0 && 2 + -1 * m + p == 0)
{
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(8*k2 + q)] * fin[1 + 2*(-1 + 8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += 0.5 * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
Edfc += -0.5 * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * fin[1 + 2*(8*j2 + p)] * fin[1 + 2*(-1 + 8*k2 + q)] * fin[1 + 2*(8*k2 + q)] * gd(n, m) * gd(-1 + q, 1 + p) * J[i] * J[j2] * epsd(dU, k2, j2, -1 + q, 1 + p) * (1 / (epsd(U0, n, m))) * (1 / (epsd(U0, n, m) + epsd(U0, -1 + q, 1 + p)));
}
}
}
}
}
}
}
}
return Edfc;
}

double ode7(int in, vector<double>& fin, vector<double>& J, double U0, vector<double>& dU, double mu)
{
int i = in / (2*dim);
int n = (in % (2*dim)) / 2;
if( in % 2 == 0)
{
return ode7r(i, n, fin, J, U0, dU, mu);
}
else
{
return ode7i(i, n, fin, J, U0, dU, mu);
}
}

double odeSr(int i, int np, vector<double>& fin, vector<double>& J, vector<double>& Jp, double U0, double U0p, vector<double>& dU, double mu)
{
double Edfc = 0;
int k1 = mod(i-2);
int j1 = mod(i-1);
int j2 = mod(i+1);
int k2 = mod(i+2);
for( int n = 0; n < nmax; n++)
{
for( int m = 1; m < 1 + nmax; m++)
{
if( n != -1 + m)
{
if( 1 + n + -1 * np == 0)
{
Edfc += (1 / (1. + -1 * m + n)) * (1 / (U0 * U0)) * U0p * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * gd(n, m) * J[i];
Edfc += (1 / (1. + -1 * m + n)) * (1 / (U0 * U0)) * U0p * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * gd(n, m) * J[i];
Edfc += (1 / (1. + -1 * m + n)) * (1 / (U0 * U0)) * U0p * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * gd(n, m) * J[i];
Edfc += -1 * (1 / (1. + -1 * m + n)) * (1 / (U0 * U0)) * U0p * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * gd(n, m) * J[i];
Edfc += (1 / (1. + -1 * m + n)) * (1 / (U0 * U0)) * U0p * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * gd(n, m) * J[j1];
Edfc += (1 / (1. + -1 * m + n)) * (1 / (U0 * U0)) * U0p * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * gd(n, m) * J[j1];
Edfc += (1 / (1. + -1 * m + n)) * (1 / (U0 * U0)) * U0p * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * gd(n, m) * J[j1];
Edfc += -1 * (1 / (1. + -1 * m + n)) * (1 / (U0 * U0)) * U0p * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * gd(n, m) * J[j1];
Edfc += -1 * (1 / (1. + -1 * m + n)) * (1 / (U0)) * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[2*(8*i + n)] * gd(n, m) * Jp[i];
Edfc += -1 * (1 / (1. + -1 * m + n)) * (1 / (U0)) * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * gd(n, m) * Jp[i];
Edfc += -1 * (1 / (1. + -1 * m + n)) * (1 / (U0)) * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*i + n)] * gd(n, m) * Jp[i];
Edfc += (1 / (1. + -1 * m + n)) * (1 / (U0)) * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * gd(n, m) * Jp[i];
Edfc += -1 * (1 / (1. + -1 * m + n)) * (1 / (U0)) * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[2*(8*i + n)] * gd(n, m) * Jp[j1];
Edfc += -1 * (1 / (1. + -1 * m + n)) * (1 / (U0)) * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * gd(n, m) * Jp[j1];
Edfc += -1 * (1 / (1. + -1 * m + n)) * (1 / (U0)) * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*i + n)] * gd(n, m) * Jp[j1];
Edfc += (1 / (1. + -1 * m + n)) * (1 / (U0)) * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * gd(n, m) * Jp[j1];
}
if( 1 + -1 * m + np == 0)
{
Edfc += (1 / (1. + -1 * m + n)) * (1 / (U0 * U0)) * U0p * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * gd(n, m) * J[i];
Edfc += -1 * (1 / (1. + -1 * m + n)) * (1 / (U0 * U0)) * U0p * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * gd(n, m) * J[i];
Edfc += (1 / (1. + -1 * m + n)) * (1 / (U0 * U0)) * U0p * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * gd(n, m) * J[i];
Edfc += (1 / (1. + -1 * m + n)) * (1 / (U0 * U0)) * U0p * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * gd(n, m) * J[i];
Edfc += (1 / (1. + -1 * m + n)) * (1 / (U0 * U0)) * U0p * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * gd(n, m) * J[j1];
Edfc += -1 * (1 / (1. + -1 * m + n)) * (1 / (U0 * U0)) * U0p * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * gd(n, m) * J[j1];
Edfc += (1 / (1. + -1 * m + n)) * (1 / (U0 * U0)) * U0p * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * gd(n, m) * J[j1];
Edfc += (1 / (1. + -1 * m + n)) * (1 / (U0 * U0)) * U0p * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * gd(n, m) * J[j1];
Edfc += -1 * (1 / (1. + -1 * m + n)) * (1 / (U0)) * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * gd(n, m) * Jp[i];
Edfc += (1 / (1. + -1 * m + n)) * (1 / (U0)) * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * gd(n, m) * Jp[i];
Edfc += -1 * (1 / (1. + -1 * m + n)) * (1 / (U0)) * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * gd(n, m) * Jp[i];
Edfc += -1 * (1 / (1. + -1 * m + n)) * (1 / (U0)) * fin[2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * gd(n, m) * Jp[i];
Edfc += -1 * (1 / (1. + -1 * m + n)) * (1 / (U0)) * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * gd(n, m) * Jp[j1];
Edfc += (1 / (1. + -1 * m + n)) * (1 / (U0)) * fin[1 + 2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * gd(n, m) * Jp[j1];
Edfc += -1 * (1 / (1. + -1 * m + n)) * (1 / (U0)) * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * gd(n, m) * Jp[j1];
Edfc += -1 * (1 / (1. + -1 * m + n)) * (1 / (U0)) * fin[2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * gd(n, m) * Jp[j1];
}
}
}
}
return Edfc;
}

double odeSi(int i, int np, vector<double>& fin, vector<double>& J, vector<double>& Jp, double U0, double U0p, vector<double>& dU, double mu)
{
double Edfc = 0;
int k1 = mod(i-2);
int j1 = mod(i-1);
int j2 = mod(i+1);
int k2 = mod(i+2);
for( int n = 0; n < nmax; n++)
{
for( int m = 1; m < 1 + nmax; m++)
{
if( n != -1 + m)
{
if( 1 + n + -1 * np == 0)
{
Edfc += -1 * (1 / (1. + -1 * m + n)) * (1 / (U0 * U0)) * U0p * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * gd(n, m) * J[i];
Edfc += (1 / (1. + -1 * m + n)) * (1 / (U0 * U0)) * U0p * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * gd(n, m) * J[i];
Edfc += (1 / (1. + -1 * m + n)) * (1 / (U0 * U0)) * U0p * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * gd(n, m) * J[i];
Edfc += (1 / (1. + -1 * m + n)) * (1 / (U0 * U0)) * U0p * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * gd(n, m) * J[i];
Edfc += -1 * (1 / (1. + -1 * m + n)) * (1 / (U0 * U0)) * U0p * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * gd(n, m) * J[j1];
Edfc += (1 / (1. + -1 * m + n)) * (1 / (U0 * U0)) * U0p * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * gd(n, m) * J[j1];
Edfc += (1 / (1. + -1 * m + n)) * (1 / (U0 * U0)) * U0p * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * gd(n, m) * J[j1];
Edfc += (1 / (1. + -1 * m + n)) * (1 / (U0 * U0)) * U0p * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * gd(n, m) * J[j1];
Edfc += (1 / (1. + -1 * m + n)) * (1 / (U0)) * fin[2*(8*j2 + m)] * fin[1 + 2*(-1 + 8*j2 + m)] * fin[2*(8*i + n)] * gd(n, m) * Jp[i];
Edfc += -1 * (1 / (1. + -1 * m + n)) * (1 / (U0)) * fin[2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[2*(8*i + n)] * gd(n, m) * Jp[i];
Edfc += -1 * (1 / (1. + -1 * m + n)) * (1 / (U0)) * fin[2*(-1 + 8*j2 + m)] * fin[2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * gd(n, m) * Jp[i];
Edfc += -1 * (1 / (1. + -1 * m + n)) * (1 / (U0)) * fin[1 + 2*(-1 + 8*j2 + m)] * fin[1 + 2*(8*j2 + m)] * fin[1 + 2*(8*i + n)] * gd(n, m) * Jp[i];
Edfc += (1 / (1. + -1 * m + n)) * (1 / (U0)) * fin[2*(8*j1 + m)] * fin[1 + 2*(-1 + 8*j1 + m)] * fin[2*(8*i + n)] * gd(n, m) * Jp[j1];
Edfc += -1 * (1 / (1. + -1 * m + n)) * (1 / (U0)) * fin[2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[2*(8*i + n)] * gd(n, m) * Jp[j1];
Edfc += -1 * (1 / (1. + -1 * m + n)) * (1 / (U0)) * fin[2*(-1 + 8*j1 + m)] * fin[2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * gd(n, m) * Jp[j1];
Edfc += -1 * (1 / (1. + -1 * m + n)) * (1 / (U0)) * fin[1 + 2*(-1 + 8*j1 + m)] * fin[1 + 2*(8*j1 + m)] * fin[1 + 2*(8*i + n)] * gd(n, m) * Jp[j1];
}
if( 1 + -1 * m + np == 0)
{
Edfc += (1 / (1. + -1 * m + n)) * (1 / (U0 * U0)) * U0p * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * gd(n, m) * J[i];
Edfc += (1 / (1. + -1 * m + n)) * (1 / (U0 * U0)) * U0p * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * gd(n, m) * J[i];
Edfc += -1 * (1 / (1. + -1 * m + n)) * (1 / (U0 * U0)) * U0p * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * gd(n, m) * J[i];
Edfc += (1 / (1. + -1 * m + n)) * (1 / (U0 * U0)) * U0p * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * gd(n, m) * J[i];
Edfc += (1 / (1. + -1 * m + n)) * (1 / (U0 * U0)) * U0p * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * gd(n, m) * J[j1];
Edfc += (1 / (1. + -1 * m + n)) * (1 / (U0 * U0)) * U0p * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * gd(n, m) * J[j1];
Edfc += -1 * (1 / (1. + -1 * m + n)) * (1 / (U0 * U0)) * U0p * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * gd(n, m) * J[j1];
Edfc += (1 / (1. + -1 * m + n)) * (1 / (U0 * U0)) * U0p * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * gd(n, m) * J[j1];
Edfc += -1 * (1 / (1. + -1 * m + n)) * (1 / (U0)) * fin[1 + 2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[2*(1 + 8*j2 + n)] * gd(n, m) * Jp[i];
Edfc += -1 * (1 / (1. + -1 * m + n)) * (1 / (U0)) * fin[2*(8*i + m)] * fin[2*(1 + 8*j2 + n)] * fin[1 + 2*(8*j2 + n)] * gd(n, m) * Jp[i];
Edfc += (1 / (1. + -1 * m + n)) * (1 / (U0)) * fin[2*(8*i + m)] * fin[2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * gd(n, m) * Jp[i];
Edfc += -1 * (1 / (1. + -1 * m + n)) * (1 / (U0)) * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j2 + n)] * fin[1 + 2*(1 + 8*j2 + n)] * gd(n, m) * Jp[i];
Edfc += -1 * (1 / (1. + -1 * m + n)) * (1 / (U0)) * fin[1 + 2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[2*(1 + 8*j1 + n)] * gd(n, m) * Jp[j1];
Edfc += -1 * (1 / (1. + -1 * m + n)) * (1 / (U0)) * fin[2*(8*i + m)] * fin[2*(1 + 8*j1 + n)] * fin[1 + 2*(8*j1 + n)] * gd(n, m) * Jp[j1];
Edfc += (1 / (1. + -1 * m + n)) * (1 / (U0)) * fin[2*(8*i + m)] * fin[2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * gd(n, m) * Jp[j1];
Edfc += -1 * (1 / (1. + -1 * m + n)) * (1 / (U0)) * fin[1 + 2*(8*i + m)] * fin[1 + 2*(8*j1 + n)] * fin[1 + 2*(1 + 8*j1 + n)] * gd(n, m) * Jp[j1];
}
}
}
}
return Edfc;
}

double odeS(int in, vector<double>& fin, vector<double>& J, vector<double>& Jp, double U0, double U0p, vector<double>& dU, double mu)
{
int i = in / (2*dim);
int n = (in % (2*dim)) / 2;
if( in % 2 == 0)
{
return odeSr(i, n, fin, J, Jp, U0, U0p, dU, mu);
}
else
{
return odeSi(i, n, fin, J, Jp, U0, U0p, dU, mu);
}
}

double ode(int in, vector<double>& fin, vector<double>& J, vector<double>& Jp, double U0, double U0p, vector<double>& dU, double mu)
{
double Edfc = 0;
Edfc += ode1(in, fin, J, U0, dU, mu);
Edfc += ode2(in, fin, J, U0, dU, mu);
Edfc += ode3(in, fin, J, U0, dU, mu);
Edfc += ode4(in, fin, J, U0, dU, mu);
Edfc += ode5(in, fin, J, U0, dU, mu);
Edfc += ode6(in, fin, J, U0, dU, mu);
Edfc += ode7(in, fin, J, U0, dU, mu);
Edfc += odeS(in, fin, J, Jp, U0, U0p, dU, mu);
return Edfc;
}

